{"version":3,"sources":["SortingAlgorithms/SortingAlgorithms.js","SortingVizualizer/SortingVisualizer.jsx","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSort","a","s","e","aux","mid","Math","floor","middle","k","i","j","push","merge","PRIMARY_COLOR","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","document","querySelectorAll","forEach","style","backgroundColor","bars","getElementsByClassName","one","two","oneStyle","twoStyle","color","NUMBER_OF_ARRAY_BARS","setTimeout","newHeight","height","normal","graph","querySelector","classList","contains","remove","add","className","map","val","onClick","mergesort","disabled","changeType","src","alt","Component","App","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.746ddabe.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSort(a, s, e, aux, animations) {\r\n  if (s === e) return;\r\n  const mid = Math.floor((s + e) / 2);\r\n\r\n  // further divide the array into 2 parts\r\n  // start to middle & middle + 1 to end\r\n  mergeSort(aux, s, mid, a, animations);\r\n  mergeSort(aux, mid + 1, e, a, animations);\r\n\r\n  // merge the parts\r\n  merge(a, s, mid, e, aux, animations);\r\n}\r\n\r\nfunction merge(a, s, middle, e, aux, animations) {\r\n  let k = s;\r\n  let i = s;\r\n  let j = middle + 1;\r\n\r\n  // check for smaller element between the i and j position\r\n  // while start <= mid and mid + 1 <= end\r\n  while (i <= middle && j <= e) {\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n    if (aux[i] < aux[j]) {\r\n      animations.push([k, aux[i]]);\r\n      a[k++] = aux[i++];\r\n    } else {\r\n      animations.push([k, aux[j]]);\r\n      a[k++] = aux[j++];\r\n    }\r\n  }\r\n\r\n  while (i <= middle) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([k, aux[i]]);\r\n    a[k++] = aux[i++];\r\n  }\r\n\r\n  while (j <= e) {\r\n    animations.push([j, j]);\r\n    animations.push([j, j]);\r\n    animations.push([k, aux[j]]);\r\n    a[k++] = aux[j++];\r\n  }\r\n}\r\n","import { Component } from \"react\";\r\nimport \"./SortingVisualizer.css\";\r\nimport { getMergeSortAnimations } from \"../SortingAlgorithms/SortingAlgorithms\";\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 3;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 100;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"crimson\";\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"lightgreen\";\r\n\r\n// This is the final color of the array bars.\r\nconst FINAL_COLOR = \"darkorchid\";\r\n\r\nexport default class SortingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(50, 500));\r\n    }\r\n    this.setState({ array });\r\n    // reset color\r\n    let arrayBars = document.querySelectorAll(\"div.array-bar\");\r\n    arrayBars.forEach((e) => (e.style.backgroundColor = PRIMARY_COLOR));\r\n  }\r\n\r\n  mergesort() {\r\n    let animations = getMergeSortAnimations(this.state.array);\r\n    // console.log(animations);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const bars = document.getElementsByClassName(\"array-bar\");\r\n      const changeColor = i % 3 !== 2;\r\n      if (changeColor) {\r\n        const [one, two] = animations[i];\r\n        const oneStyle = bars[one].style;\r\n        const twoStyle = bars[two].style;\r\n        const color =\r\n          i <= animations.length - NUMBER_OF_ARRAY_BARS * 3\r\n            ? i % 3 === 0\r\n              ? SECONDARY_COLOR\r\n              : PRIMARY_COLOR\r\n            : FINAL_COLOR;\r\n        setTimeout(() => {\r\n          oneStyle.backgroundColor = color;\r\n          twoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [one, newHeight] = animations[i];\r\n          const oneStyle = bars[one].style;\r\n          oneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  changeType(normal) {\r\n    const graph = document.querySelector(\".array-container\");\r\n    if (normal && graph.classList.contains(\"audio\")) {\r\n      graph.classList.remove(\"audio\");\r\n    } else if (!normal && !graph.classList.contains(\"audio\")) {\r\n      graph.classList.add(\"audio\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"array-container\">\r\n          {array.map((val, i) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={i}\r\n              style={{ height: `${val}px` }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n        <div className=\"menu\">\r\n          <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n          <button onClick={() => this.mergesort()}>Merge Sort</button>\r\n          <button disabled=\"disabled\" className=\"disabled\">Quick Sort</button>\r\n          <button disabled=\"disabled\" className=\"disabled\">Heap Sort</button>\r\n          <button disabled=\"disabled\" className=\"disabled\">Bubble Sort</button>\r\n        </div>\r\n        <div className=\"type\">\r\n          <img\r\n            className=\"btn\"\r\n            onClick={() => this.changeType(true)}\r\n            height=\"25px\"\r\n            src={\"https://image.flaticon.com/icons/png/512/900/900784.png\"}\r\n            alt=\"graph\"\r\n          />\r\n          <img\r\n            className=\"btn\"\r\n            onClick={() => this.changeType(false)}\r\n            height=\"25px\"\r\n            src={\"https://image.flaticon.com/icons/png/512/709/709559.png\"}\r\n            alt=\"graph\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import \"./styles.css\";\nimport SortingVisualizer from \"./SortingVizualizer/SortingVisualizer\";\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}